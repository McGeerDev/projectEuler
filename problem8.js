// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

// 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

/////Thinking and logic
// set digit val = "67881220235421809751254540594752243...."
// get index of zeroes in digits val;
// startIndex = first 0     endIndex = 2nd 0
// if(endIndex-startIndex == 13)
// let digits = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560"

// Changed the given format of the string of digits into a single line value.
let digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"


// getZeroIndices() finds the indices of all the zero values in the string as the product with 0 will be 0 and thus not maximum;
const getZeroIndices = (digits) => {
  let indexArr = [];
  for(let i=0;i<digits.length;i++){
    if(digits[i] == '0'){
      indexArr.push(digits.indexOf('0',i))
    }
  }
  return indexArr;
}

// console.log(getZeroIndices(digits)); // Testing log

// getNonZeroStrings() gets the adjacent digits in their own string, filters the values by length to be 13 and longer and returns the filtered array.
const getNonZeroStrings = (digits) =>{
  let valuesArr = [];
  let filteredValues = []
  let indices = getZeroIndices(digits);

  let temp = 0;
  for(let value of indices){
    if(temp == 0){
      // console.log(value,digits.slice(temp,digits.indexOf('0',value)))
      valuesArr.push(digits.slice(temp,digits.indexOf('0',value)))
    }else{
      // console.log(value,digits.slice(temp+1,digits.indexOf('0',value)))
      valuesArr.push(digits.slice(temp+1,digits.indexOf('0',value)))
    }
    temp = value
  }
  for(let value of valuesArr){
    if(value.length >= 13){
      filteredValues.push(value)
    }
  }
  return filteredValues;
}

// console.log(getNonZeroStrings(digits)) // Testing log

// findMaxInString() finds the maximum product of 13 adjacent digits in a string of any length(above 12);
const findMaxInString = (str) =>{
  let maximum = 1;
  let products = [];
  for(let i = 0;i<str.length-12;i++){
    for(let j = 0+i;j<13+i;j++){
      maximum *= parseInt(str[j]);
    }
    products.push(maximum);
    maximum = 1
  }
  return Math.max(...products)
}

// console.log(findMaxInString()) // Testing log

// calculateMaxProduct() return the greatest product from all strings returned in from the findMaxInString() returned array.
const calculateMaxProduct = (digits) =>{
  let maxes = [];
  let arr = getNonZeroStrings(digits);
  for(let values of arr){
    maxes.push(findMaxInString(String(values)));
  } 
  return Math.max(...maxes); // Finds the maximum value in an array
}

console.log(calculateMaxProduct(digits));